<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="addaccountform" width="1000" height="400" titletext="New Form" onkeydown="addaccountform_onkeydown" onload="addaccountform_onload">
    <Layouts>
      <Layout height="400" width="1000">
        <Button id="list_btn" taborder="5" text="목록" left="907" top="340" width="70" height="20" onclick="list_btn_onclick"/>
        <Button id="save_btn" taborder="3" text="저장" left="805" top="340" width="70" height="20" onclick="save_btn_onclick"/>
        <Edit id="edit_inner_code" taborder="4" left="20" top="95" width="240" height="30" onchanged="Edit00_onchanged" readonly="true"/>
        <Edit id="edit_subject" taborder="2" left="737" top="95" width="240" height="30" displaynulltext="계정과목을 입력해 주세요" onkeyup="edit_subject_onkeyup"/>
        <Combo id="edit_group" taborder="1" left="498" top="95" width="240" height="30" innerdataset="ds_group" datacolumn="GROUP_CODE" displaynulltext="계정그룹코드를 선택해 주세요" onitemchanged="edit_group_onitemchanged"/>
        <Combo id="edit_subject_code" taborder="0" text="" left="259" top="95" width="240" height="30" innerdataset="ds_account" datacolumn="ACCOUNT_NAME" displaynulltext="계정과목을 선택해 주세요" canitemchange="edit_subject_canitemchange" onitemchanged="edit_subject_code_onitemchanged"/>
        <Static id="Static00" taborder="6" text="계정코드" left="31" top="50" width="212" height="26" textAlign="center"/>
        <Static id="Static00_00" taborder="7" text="계정과목코드" left="273" top="50" width="212" height="26" textAlign="center"/>
        <Static id="Static00_01" taborder="8" text="계정그룹코드" left="515" top="50" width="212" height="26" textAlign="center"/>
        <Static id="Static00_02" taborder="9" text="계정과목" left="757" top="50" width="212" height="26" textAlign="center"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_account">
        <ColumnInfo>
          <Column id="ACCOUNT_INNER_CODE" type="STRING" size="256"/>
          <Column id="PARENT_ACCOUNT_INNER_CODE" type="STRING" size="256"/>
          <Column id="ACCOUNT_CHARACTER" type="STRING" size="256"/>
          <Column id="ACCOUNT_NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_group">
        <ColumnInfo>
          <Column id="GROUP_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_accountDetailList">
        <ColumnInfo>
          <Column id="ACCOUNT_INNER_CODE" type="STRING" size="256"/>
          <Column id="GROUP_CODE" type="STRING" size="256"/>
          <Column id="ACCOUNT_NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_account_for_transfer">
        <ColumnInfo>
          <Column id="PARENT_ACCOUNT_INNER_CODE" type="STRING" size="256"/>
          <Column id="ACCOUNT_CHARACTER" type="STRING" size="256"/>
          <Column id="ACCOUNT_NAME" type="STRING" size="256"/>
          <Column id="GROUP_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[include "scripts::commonDate.xjs";
application = nexacro.getApplication();
var today;
var row;
var status;
var code; 





this.addaccountform_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{

	trace("onload Event has been occured at : accountaddform");

	
	var id = "selectaccount";
	var url = "svcOperate::findParentAccountList";
	var resData = "";  // update하거나 insert할때는 res데이터로 :U옵션을 주고 전송 
	var reqData = "ds_account=gds_account"; // 데이터 요청 
	var args = "";
	var callback = "callback";

	this.transaction(id, url, resData, reqData, args, callback);

		trace("onload event has been successfully finished at : accountaddform");
		
		
	trace("<<<<transaction for ds_accountDetailList has been started!!!");
		
	var id = "forFindDuplication";
	var url = "svcOperate::forFindDuplication";
	var resData = "";  // update하거나 insert할때는 res데이터로 :U옵션을 주고 전송 
	var reqData = "ds_accountDetailList=gds_account_detail"; // 데이터 요청 To클래스명을 
	var args = "";											  // 잘 맞추어 주어야 한다. 	
	var callback = "callback2";

	this.transaction(id, url, resData, reqData, args, callback);
	trace(">>>>>>transaction for ds_accountDetailList has been finished!!!");

	
	
	// 해당 폼이 띄워지면은 edit_subject_code로 포커스를 준다. 
	// this.edit_subject_code.setFocus();
	
	
	



};


// 비교할 데이터가 잘 왔는 지 확인 
this.callback2=function(){

var rowCnt=this.ds_accountDetailList.getRowCount();
trace("<<<<<< data for find duplication has been arrived rowCnt : "+rowCnt)




}











//목록으로 돌아가는 버튼 ---> 해당 창이 닫힘
this.list_btn_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
   this.close();
};



//esc버튼을 누르면 해당 창이 닫힘
this.addaccountform_onkeydown = function(obj:nexacro.Form,e:nexacro.KeyEventInfo)
{
		const a=e.keycode;

if(a==27){
this.close();
	}
};



//테스트 완료
this.save_btn_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{

		trace(this.edit_subject_code.value);
		if(this.edit_subject_code.value==undefined){
			alert('계정과목 코드를 선택해 주세요.');
			return;
		}else if(this.edit_group.value==undefined){
			alert('계정그룹을 선택해 주세요.');
			return;
		}else if(this.edit_subject.value==''||this.edit_subject.value==undefined||this.edit_subject.text.trim()==''){   
			trace("edit_subject_code doesnt have value");							
			return;
		}



	var accountSubject=this.edit_subject.text;  // 계정과목에 입력된 값을 받아서
	trace("account_Subject : "+accountSubject);						// 출력 
	
	
	// 입력된 값과 중복되는 값이 없으면, -1을 반환 있으면 해당 행의 index를 반환 
	var nRow=this.ds_accountDetailList.findRow("ACCOUNT_NAME",accountSubject); 
	trace('');
	trace('');
	trace('');
	trace("<<<<<< is this account_subject duplicated? "+ accountSubject+" nRow : "+nRow);                                                // -1을 반환 있으면 해당 row?를 반환
	trace(nRow==-1?'NO' : 'YES');
	trace('');
	trace('');
	trace('');
		

		
	//등록 여부를 물어보고 	
	var bool =confirm("계정과목을 등록하시겠습니까?");
	
	// "아니요"를 선택하면은 return
	if(!bool)return;

	
	// "예"를 선택하면은 함수를 호출 
	this.for_insert_transaction(bool,nRow);


	
};


// confirm의 값이 true일때 해당 값을 ds_account_for_transfer에 넣어서 서버로 전송
this.for_insert_transaction=function(bool,nRow){



		var edit_subjectCnt=this.edit_subject.text;
		
		//대응하는 db칼럼이 최대 20자 이므로, 20자 이하로 작성 해야함.
		if(edit_subjectCnt.length>20){
		trace('<<<this is length of word : '+edit_subjectCnt.length)
		alert('글자수는 20자 이내로 작성해 주세요.');
		return;
			}
			
			
						
			if(nRow!=-1){ // 입력된 값과 일치하는 값이 있으면
		       alert('이미 존재하는 계정과목 입니다.');
		    return;
	     	}



trace('<<<<this is from insert transaction!!!');




var parent_account_inner_code=this.edit_inner_code.text; // DB에는 parent_account_inner_code insert;
var account_character=this.edit_subject_code.text;
var account_name=this.edit_subject.text;
var account_group=this.edit_group.text;


trace('<<<<account_inner_code is : '+parent_account_inner_code,
	  ' // account_character is :' + account_character,
	  ' // account_name is :' + account_name,
	  ' // account_group is :' + account_group
);	

	this.ds_account_for_transfer.clearData(); // 데이터 셋을 지우고 
	this.ds_account_for_transfer.addRow();     // 새로운 row를 추가  
	trace('--->this is ds_account.rowCount() after addRow() : '+this.ds_account_for_transfer.getRowCount());
	this.ds_account_for_transfer.setColumn(0,0,parent_account_inner_code);
	this.ds_account_for_transfer.setColumn(0,1,account_character);
	this.ds_account_for_transfer.setColumn(0,2,account_name);
	this.ds_account_for_transfer.setColumn(0,3,account_group);

	
	
   if(bool){
	

	
	trace('<<<Data for insert are ready to trasnfer!!! ')
	

	var id = "insertaccountsubject";
	var url = "svcOperate::registerAccountDetail";
	var resData = "gds_account_detail=ds_account_for_transfer"; // 데이터 전송 
	var reqData = "";
	var args = "";
	var callback = "callback";
	
	this.transaction(id, url, resData, reqData, args, callback);
  
  trace('>>> data for insert is successfully submitted!!!');
  
  alert("계정과목이 등록 되었습니다.");
  this.close();
  }else if(bool){
  
	return;
  }

}











// 콤보의 아이템이 변경되고 나서 발생
//테스트 성공
this.edit_subject_code_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	
	var objDs = obj.getInnerDataset(); //바인딩된 innertdataset의 정보를 찾아옴
	trace("<<<objDs : "+objDs);
		var data = objDs.getColumn(e.postindex,"ACCOUNT_INNER_CODE"); // innerdataset이라 postindex값을 사용해야
		trace("<<<data : "+data);									  // 하는거 같음					
 		this.edit_inner_code.set_value(data);						  //  그냥 데이터 셋은 e.row,e.currow사용
 		 
 		
		
	code=this.edit_subject_code.text;
	trace("this is code received from : edit_group_code_on_itemchanged "+code);

	
	
	
	//선택된 계정과목에 따라 그룹 코드에 데이터를 추가하기 위한 함수 
	this.group_code_Func(code);
};





//테스트 완료
this.group_code_Func=function(code){

trace("group_code_Func has been called");
	this.ds_group.clearData();

	this.ds_group.addRow(); // 새로운 행을 추가 

//테스트 성공
	if(code=='당좌자산'||code=='재고자산'){
	this.ds_group.setColumn(0,0,'유동자산');

	}else if(code=='투자자산'||code=='유형자산'||code=='무형자산'||code=='기타비유동자산'){
		this.ds_group.setColumn(0,0,'비유동자산');
	}else if(code=='유동부채'){
		this.ds_group.setColumn(0,0,'유동부채');
	}else if(code=='비유동부채'){
		this.ds_group.setColumn(0,0,'비유동부채');
	}else if(code=='자본금'||code=='자본잉여금'||code=='이익잉여금'||code=='자본조정'||code=='기타포괄손익'){
		this.ds_group.setColumn(0,0,'자본');
	}


//데이터가 잘 들어갔는지 확인할때 사용 
// 	var rowCnt=this.ds_group.getRowCount();
// 	trace("rowCnt : "+rowCnt);

};



//edit_subject에서 entre키를 눌렀다가 때면은 save_btn이 클릭되도록 이벤트를 등록 
this.edit_subject_onkeyup = function(obj:nexacro.Edit,e:nexacro.KeyEventInfo)
{   var key=e.keycode;
		if(key==13){
	this.save_btn.click();
	}
};
]]></Script>
  </Form>
</FDL>
